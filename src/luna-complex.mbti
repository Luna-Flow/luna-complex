package Luna-Flow/luna-complex

// Values

// Types and methods
pub(all) struct Complex {
  re : Double
  im : Double
}
impl Complex {
  abs(Self) -> Double
  abs_log(Self) -> Double
  abs_sqr(Self) -> Double
  acos(Self) -> Self
  acos_real(Double) -> Self
  acosh(Self) -> Self
  acosh_real(Double) -> Self
  acot(Self) -> Self
  acoth(Self) -> Self
  acsc(Self) -> Self
  acsc_real(Double) -> Self
  acsch(Self) -> Self
  arg(Self) -> Double
  asec(Self) -> Self
  asec_real(Double) -> Self
  asech(Self) -> Self
  asin(Self) -> Self
  asin_real(Double) -> Self
  asinh(Self) -> Self
  atan(Self) -> Self
  atanh(Self) -> Self
  atanh_real(Double) -> Self
  cos(Self) -> Self
  cosh(Self) -> Self
  cot(Self) -> Self
  coth(Self) -> Self
  csc(Self) -> Self
  csch(Self) -> Self
  exp(Self) -> Self
  log(Self) -> Self
  log_10(Self) -> Self
  log_b(Self, Self) -> Self
  native_pack(Double, Double, Array[Double], Int) -> Unit
  new(Double, Double) -> Self
  op_bin_im(Self, Double, (Self, Self) -> Self) -> Self
  op_bin_re(Self, Double, (Self, Self) -> Self) -> Self
  op_div(Self, Self) -> Self
  pack(Self, Array[Double], Int) -> Unit
  polar(Double, Double) -> Self
  pow(Self, Self) -> Self
  pow_real(Self, Double) -> Self
  sec(Self) -> Self
  sech(Self) -> Self
  set(Self, Double, Double) -> Unit
  set_im(Self, Double) -> Unit
  set_re(Self, Double) -> Unit
  sin(Self) -> Self
  sinh(Self) -> Self
  sqrt(Self) -> Self
  sqrt_real(Double) -> Self
  tan(Self) -> Self
  tanh(Self) -> Self
}
impl @Luna-Flow/luna-generic.Conjugate for Complex
impl @Luna-Flow/luna-generic.Inverse for Complex
impl @Luna-Flow/luna-generic.One for Complex
impl @Luna-Flow/luna-generic.Zero for Complex
impl Add for Complex
impl Eq for Complex
impl Mul for Complex
impl Neg for Complex
impl Show for Complex
impl Sub for Complex

// Type aliases

// Traits

